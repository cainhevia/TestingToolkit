{
  "stats": {
    "suites": 2,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-14T22:00:04.224Z",
    "end": "2023-04-14T22:00:05.680Z",
    "duration": 1456,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2153a2dc-4cc3-4395-ab7e-d8ea0ea6ec0e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
          "title": "TriviaClient - Categories",
          "fullFile": "C:\\Users\\cainh\\source\\repos\\TestingToolkit\\OpenTriviaValidator\\tests\\test_cases\\test_categories.js",
          "file": "\\tests\\test_cases\\test_categories.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"TriviaClient - Categories\"",
              "fullTitle": "TriviaClient - Categories \"before each\" hook in \"TriviaClient - Categories\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient = new TriviaClient();",
              "err": {},
              "uuid": "cd9731ab-7711-448f-844b-6888e5e76619",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"TriviaClient - Categories\"",
              "fullTitle": "TriviaClient - Categories \"after each\" hook in \"TriviaClient - Categories\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient = null;",
              "err": {},
              "uuid": "66b423bf-dde7-4d57-ae4f-4ecf52fea27e",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve a list of trivia categories",
              "fullTitle": "TriviaClient - Categories should retrieve a list of trivia categories",
              "timedOut": false,
              "duration": 237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getCategoriesWithTimeout(triviaClient, 25000);\nexpect(response.trivia_categories).to.be.an('array').that.is.not.empty;\nresponse.trivia_categories.forEach((category) => {\n    expect(category).to.have.property('id').that.is.a('number');\n    expect(category).to.have.property('name').that.is.a('string');\n});",
              "err": {},
              "uuid": "18119888-6a4d-4b74-8305-c0882aaf2903",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should decode HTML entities in the category names",
              "fullTitle": "TriviaClient - Categories should decode HTML entities in the category names",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getCategoriesWithTimeout(triviaClient, 15000);\nresponse.trivia_categories.forEach((category) => {\n    const decodedName = decodeHTMLEntities(category.name);\n    expect(decodedName).to.equal(decodedName.replace(/&[^;]+;/g, ''));\n});",
              "err": {},
              "uuid": "a19978dd-e302-4e80-8167-e262e49de912",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate that the same set of categories is returned on multiple calls",
              "fullTitle": "TriviaClient - Categories should validate that the same set of categories is returned on multiple calls",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response1 = await getCategoriesWithTimeout(triviaClient, 20000);\nconst response2 = await getCategoriesWithTimeout(triviaClient, 20000);\nexpect(response1.trivia_categories.length).to.equal(response2.trivia_categories.length);\nconst idSet1 = new Set(response1.trivia_categories.map((category) => category.id));\nconst idSet2 = new Set(response2.trivia_categories.map((category) => category.id));\nexpect([...idSet1].sort()).to.deep.equal([...idSet2].sort());",
              "err": {},
              "uuid": "797e18bd-a235-4a23-b27e-0212d4416699",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an invalid API endpoint",
              "fullTitle": "TriviaClient - Categories should handle an invalid API endpoint",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient.getCategories = async function () {\n    const url = `${this.BASE_URL}/invalid_endpoint.php`;\n    try {\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching trivia categories:', error);\n        throw error;\n    }\n};\nawait expect(triviaClient.getCategories()).to.be.rejectedWith(Error);",
              "err": {},
              "uuid": "7d73fe4b-76a3-4743-96aa-bf17e70af465",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle network errors",
              "fullTitle": "TriviaClient - Categories should handle network errors",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient.getCategories = async function () {\n    throw new Error('Network error');\n};\nawait expect(triviaClient.getCategories()).to.be.rejectedWith(Error, 'Network error');",
              "err": {},
              "uuid": "f880ad54-3801-4b2d-bf05-041a8cad3676",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch categories in a reasonable amount of time",
              "fullTitle": "TriviaClient - Categories should fetch categories in a reasonable amount of time",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testTimeout = 10000;\nconst timeoutPromise = createTimeoutPromise(testTimeout);\nconst startTime = process.hrtime.bigint();\nconst getCategoriesPromise = triviaClient.getCategories();\nawait Promise.race([getCategoriesPromise, timeoutPromise]);\nconst endTime = process.hrtime.bigint();\n    \nconst duration = Number(endTime - startTime) / 1e6; // convert to milliseconds\nconsole.log(`getCategories execution time: ${duration.toFixed(2)}ms`); // log the execution time\nconst maxDuration = 3000; // set a maximum acceptable duration for the test\nexpect(duration).to.be.below(maxDuration, `getCategories took longer than ${maxDuration}ms`);",
              "err": {},
              "uuid": "0f30b196-a6d3-45f1-b92d-4fd02e90bca2",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the API response is malformed",
              "fullTitle": "TriviaClient - Categories should throw an error if the API response is malformed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient.getCategories = async function () {\n    return { malformed_response: true };\n};\n    \ntry {\n    await triviaClient.getCategories();\n} catch (error) {\n    expect(error).to.be.instanceOf(Error);\n    expect(error.message).to.equal('Malformed API response');\n}",
              "err": {},
              "uuid": "8d2dd1a5-7d50-4412-8e62-efa5cc5e81a8",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the API returns an error message",
              "fullTitle": "TriviaClient - Categories should throw an error if the API returns an error message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient.getCategories = async function () {\n    return { error: 'Some error message from the API' };\n};\n    \ntry {\n    await triviaClient.getCategories();\n} catch (error) {\n    expect(error).to.be.instanceOf(Error);\n    expect(error.message).to.equal('API error: Some error message from the API');\n}",
              "err": {},
              "uuid": "26da7b95-d327-4631-a088-23f45d762aac",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty categories list",
              "fullTitle": "TriviaClient - Categories should handle empty categories list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient.getCategories = async function () {\n    return { trivia_categories: [] };\n};\n    \nconst response = await triviaClient.getCategories();\nexpect(response.trivia_categories).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "e3a7ab01-fd4c-4843-abab-495065d2e1f0",
              "parentUUID": "0b9db2fa-8841-4147-bbed-b5efc4edcf6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18119888-6a4d-4b74-8305-c0882aaf2903",
            "a19978dd-e302-4e80-8167-e262e49de912",
            "797e18bd-a235-4a23-b27e-0212d4416699",
            "7d73fe4b-76a3-4743-96aa-bf17e70af465",
            "f880ad54-3801-4b2d-bf05-041a8cad3676",
            "0f30b196-a6d3-45f1-b92d-4fd02e90bca2",
            "8d2dd1a5-7d50-4412-8e62-efa5cc5e81a8",
            "26da7b95-d327-4631-a088-23f45d762aac",
            "e3a7ab01-fd4c-4843-abab-495065d2e1f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 751,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4549dd61-7470-47d5-a717-9f743d2dfa66",
          "title": "TriviaClient - Get Questions",
          "fullFile": "C:\\Users\\cainh\\source\\repos\\TestingToolkit\\OpenTriviaValidator\\tests\\test_cases\\test_get_questions.js",
          "file": "\\tests\\test_cases\\test_get_questions.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"TriviaClient - Get Questions\"",
              "fullTitle": "TriviaClient - Get Questions \"before each\" hook in \"TriviaClient - Get Questions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient = new TriviaClient();",
              "err": {},
              "uuid": "67053e71-e3b3-4b8f-8284-c68f52664b79",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"TriviaClient - Get Questions\"",
              "fullTitle": "TriviaClient - Get Questions \"after each\" hook in \"TriviaClient - Get Questions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock.cleanAll();",
              "err": {},
              "uuid": "a3d55b1e-39df-4d55-ab6f-71f7c4c82953",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve a list of trivia questions",
              "fullTitle": "TriviaClient - Get Questions should retrieve a list of trivia questions",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock('https://opentdb.com').get('/api.php?amount=10').reply(200, {\n  response_code: 0,\n  results: [\n    {\n      category: \"Entertainment: Film\",\n      type: \"multiple\",\n      difficulty: \"easy\",\n      question: \"What was the title of the first film?\",\n      correct_answer: \"First Film\",\n      incorrect_answers: [\"Second Film\", \"Third Film\", \"Fourth Film\"]\n    },\n    {\n      category: \"Entertainment: Film\",\n      type: \"multiple\",\n      difficulty: \"easy\",\n      question: \"What was the title of the second film?\",\n      correct_answer: \"Second Film\",\n      incorrect_answers: [\"First Film\", \"Third Film\", \"Fourth Film\"]\n    },\n    // Add more sample question objects as needed\n  ],\n});\nconst response = await triviaClient.getQuestions();\nexpect(response).to.have.property('response_code', 0);\nexpect(response).to.have.property('results').that.is.an('array').and.is.not.empty;\nresponse.results.forEach((question) => {\n  expect(question).to.include.all.keys(\n    'category',\n    'type',\n    'difficulty',\n    'question',\n    'correct_answer',\n    'incorrect_answers'\n  );\n  expect(question.incorrect_answers).to.be.an('array').and.is.not.empty;\n});",
              "err": {},
              "uuid": "971e837b-5c28-4240-84b9-c86d20230c06",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should decode HTML entities in the question text and answers",
              "fullTitle": "TriviaClient - Get Questions should decode HTML entities in the question text and answers",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nconst response = await triviaClient.getQuestions();\nresponse.results.forEach((question) => {\n  const decodedQuestion = decodeHTMLEntities(question.question);\n  const decodedCorrectAnswer = decodeHTMLEntities(question.correct_answer);\n  const decodedIncorrectAnswers = question.incorrect_answers.map(decodeHTMLEntities);\n  expect(decodedQuestion).to.equal(decodedQuestion.replace(/&[^;]+;/g, ''));\n  expect(decodedCorrectAnswer).to.equal(decodedCorrectAnswer.replace(/&[^;]+;/g, ''));\n  decodedIncorrectAnswers.forEach((decodedIncorrectAnswer) => {\n    expect(decodedIncorrectAnswer).to.equal(decodedIncorrectAnswer.replace(/&[^;]+;/g, ''));\n  });\n});",
              "err": {},
              "uuid": "984bf3cf-69cf-4997-a880-9952579acdb4",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should shuffle the incorrect answers",
              "fullTitle": "TriviaClient - Get Questions should shuffle the incorrect answers",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nconst response = await triviaClient.getQuestions();\nlet totalDifference = 0;\nresponse.results.forEach((question) => {\n  const originalIncorrectAnswers = [...question.incorrect_answers];\n  const shuffledIncorrectAnswers = shuffleArray(question.incorrect_answers);\n  let difference = 0;\n  originalIncorrectAnswers.forEach((item, index) => {\n    if (item !== shuffledIncorrectAnswers[index]) {\n      difference++;\n    }\n  });\n  totalDifference += difference;\n});\nconst averageDifference = totalDifference / response.results.length;\nconst minAverageDifference = 0.8;\nexpect(averageDifference).to.be.at.least(minAverageDifference, `The average difference is less than ${minAverageDifference}`);",
              "err": {},
              "uuid": "56f6ce07-da2d-409f-bde6-e86bf6ca5e20",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an invalid API base URL",
              "fullTitle": "TriviaClient - Get Questions should handle an invalid API base URL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient.BASE_URL = 'https://invalidurl.com';\ntriviaClient.getQuestions().then(() => {\n  throw new Error('Expected promise to be rejected');\n}).catch((error) => {\n  expect(error).to.be.an.instanceof(Error);\n});",
              "err": {},
              "uuid": "181c0a86-e762-4a0e-b8c1-d2c06d573f90",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve questions with specified parameters",
              "fullTitle": "TriviaClient - Get Questions should retrieve questions with specified parameters",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nconst amount = 5;\nconst category = 11;\nconst difficulty = 'easy';\nconst type = 'multiple';\nconst response = await triviaClient.getQuestions(amount, category, difficulty, type);\nexpect(response.results).to.have.lengthOf(amount);\nresponse.results.forEach((question) => {\n  expect(question).to.have.property('category').that.equals('Entertainment: Film');\n  expect(question).to.have.property('type').that.equals(type);\n  expect(question).to.have.property('difficulty').that.equals(difficulty);\n});",
              "err": {},
              "uuid": "f1e0471c-cf9e-4bb4-a2ec-8e630bfdf264",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an invalid API endpoint",
              "fullTitle": "TriviaClient - Get Questions should handle an invalid API endpoint",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "triviaClient.getQuestions = async function (amount = 10, category, difficulty, type) {\n  let url = `${this.BASE_URL}/invalid_endpoint.php?amount=${amount}`;\n  \n  if (category) url += `&category=${category}`;\n  if (difficulty) url += `&difficulty=${difficulty}`;\n  if (type) url += `&type=${type}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching trivia questions:', error);\n    throw error;\n  }\n};\n  \ntriviaClient.getQuestions().then(() => {\n  throw new Error('Expected promise to be rejected');\n}).catch((error) => {\n  expect(error).to.be.an.instanceof(Error);\n});",
              "err": {},
              "uuid": "908304e8-3fd1-4707-ab9e-c87eba4ecdfb",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle network errors",
              "fullTitle": "TriviaClient - Get Questions should handle network errors",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock('https://opentdb.com').get('/api.php?amount=10').replyWithError('Network error');\nawait expect(triviaClient.getQuestions()).to.be.rejectedWith(Error, 'Network error');",
              "err": {},
              "uuid": "be29ca9b-37a6-4893-a222-a4001447c1cf",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should measure the performance of the getQuestions method",
              "fullTitle": "TriviaClient - Get Questions should measure the performance of the getQuestions method",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000); // Set the timeout to 5 seconds\nconst startTime = Date.now();\nawait triviaClient.getQuestions();\nconst endTime = Date.now();\nconst timeTaken = endTime - startTime;\nconsole.log('Time taken by getQuestions():', timeTaken.toFixed(2), 'ms');\nconst maxTime = 3000;\nexpect(timeTaken).to.be.at.most(maxTime);",
              "err": {},
              "uuid": "6257af81-3705-4670-8a88-2dd44134e002",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty result set",
              "fullTitle": "TriviaClient - Get Questions should handle an empty result set",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock('https://opentdb.com').get('/api.php?amount=10').reply(200, {\n  response_code: 0,\n  results: [],\n});\n  \nconst response = await triviaClient.getQuestions();\nexpect(response).to.have.property('response_code', 0);\nexpect(response).to.have.property('results').that.is.an('array').and.is.empty;",
              "err": {},
              "uuid": "2e0a8728-1ff1-4025-8b51-48d6c32ab5c2",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle a non-zero response code",
              "fullTitle": "TriviaClient - Get Questions should handle a non-zero response code",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock('https://opentdb.com').get('/api.php?amount=10').reply(200, {\n  response_code: 1,\n  results: [],\n});\n  \nconst response = await triviaClient.getQuestions();\nexpect(response).to.have.property('response_code', 1);\nexpect(response).to.have.property('results').that.is.an('array').and.is.empty;",
              "err": {},
              "uuid": "af749720-8ffb-446e-a350-3a0b3d0c23ae",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only have expected properties in the result set",
              "fullTitle": "TriviaClient - Get Questions should only have expected properties in the result set",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock('https://opentdb.com').get('/api.php?amount=10').reply(200, {\n  response_code: 0,\n  results: [\n    {\n      incorrect_property: \"This is an incorrect property\",\n      category: \"Entertainment: Film\",\n      type: \"multiple\",\n      difficulty: \"easy\",\n      question: \"What was the title of the first film?\",\n      correct_answer: \"First Film\",\n      incorrect_answers: [\"Second Film\", \"Third Film\", \"Fourth Film\"],\n    },\n  ],\n});\n  \nconst response = await triviaClient.getQuestions();\nexpect(response).to.have.property('response_code', 0);\nexpect(response).to.have.property('results').that.is.an('array').and.is.not.empty;\nresponse.results.forEach((question) => {\n  const allowedProperties = [\n    'category',\n    'type',\n    'difficulty',\n    'question',\n    'correct_answer',\n    'incorrect_answers',\n  ];\n  const questionProperties = Object.keys(question);\n  const extraProperties = questionProperties.filter(\n    (prop) => !allowedProperties.includes(prop)\n  );\n  if (extraProperties.length > 0) {\n    console.warn(`Extra properties found in the question object: ${extraProperties.join(', ')}`);\n  }\n  const requiredProperties = allowedProperties.filter(\n    (prop) => questionProperties.includes(prop)\n  );\n  expect(requiredProperties).to.have.members(allowedProperties);\n});",
              "err": {},
              "uuid": "1abf287c-4b76-4798-8af9-d110ec24f238",
              "parentUUID": "4549dd61-7470-47d5-a717-9f743d2dfa66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "971e837b-5c28-4240-84b9-c86d20230c06",
            "984bf3cf-69cf-4997-a880-9952579acdb4",
            "56f6ce07-da2d-409f-bde6-e86bf6ca5e20",
            "181c0a86-e762-4a0e-b8c1-d2c06d573f90",
            "f1e0471c-cf9e-4bb4-a2ec-8e630bfdf264",
            "908304e8-3fd1-4707-ab9e-c87eba4ecdfb",
            "be29ca9b-37a6-4893-a222-a4001447c1cf",
            "6257af81-3705-4670-8a88-2dd44134e002",
            "2e0a8728-1ff1-4025-8b51-48d6c32ab5c2",
            "af749720-8ffb-446e-a350-3a0b3d0c23ae",
            "1abf287c-4b76-4798-8af9-d110ec24f238"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 686,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "my-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "my-report",
        "reportDir": "reports",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}